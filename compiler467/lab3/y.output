Terminals unused in grammar

   myToken1
   myToken2
   WS
   DOT
   SIGN
   VOID_T
   '!'
   '-'
   '['
   ']'
   '('
   ')'


Rules useless in parser due to conflicts

   11 declaration: %empty


State 4 conflicts: 5 shift/reduce, 6 reduce/reduce
State 69 conflicts: 14 shift/reduce
State 80 conflicts: 1 shift/reduce
State 81 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: scope
    2        | %empty

    3 scope: LBRACE declarations statements RBRACE

    4 declarations: declarations declaration
    5             | %empty

    6 statements: statements statement
    7           | %empty

    8 declaration: type ID SEMICOLON
    9            | type ID ASSIGNMENT expression SEMICOLON
   10            | CONST type ID ASSIGNMENT expression SEMICOLON
   11            | %empty

   12 statement: variable ASSIGNMENT expression SEMICOLON
   13          | IF LPARENTHESES expression RPARENTHESES statement else_statement
   14          | WHILE LPARENTHESES expression RPARENTHESES statement
   15          | scope
   16          | SEMICOLON

   17 else_statement: ELSE statement
   18               | %empty

   19 type: INT_T
   20     | FLOAT_T
   21     | BOOL_T
   22     | VEC_T

   23 expression: constructor
   24           | function
   25           | INT_C
   26           | FLOAT_C
   27           | BOOL_C
   28           | variable
   29           | unary_op expression
   30           | expression binary_op expression
   31           | LBRACE expression RBRACE

   32 variable: ID
   33         | ID LBRACKET INT_C RBRACKET

   34 unary_op: NOT
   35         | SUBTRACT

   36 binary_op: AND
   37          | OR
   38          | EQUAL
   39          | NOTEQUAL
   40          | GT
   41          | GE
   42          | LT
   43          | LE
   44          | ADD
   45          | SUBTRACT
   46          | MULTIPLY
   47          | DIVIDE
   48          | ASSIGNMENT
   49          | POWER

   50 constructor: type LPARENTHESES arguments RPARENTHESES

   51 function: FUNC_ID LPARENTHESES arguments_opt RPARENTHESES

   52 arguments_opt: arguments
   53              | %empty

   54 arguments: arguments COMMA expression
   55          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'(' (40)
')' (41)
'-' (45)
'[' (91)
']' (93)
error (256)
myToken1 (258)
myToken2 (259)
WS (260)
IF (261) 13
ELSE (262) 17
WHILE (263) 14
ASSIGNMENT (264) 9 10 12 48
ADD (265) 44
SUBTRACT (266) 35 45
MULTIPLY (267) 46
DIVIDE (268) 47
POWER (269) 49
NOT (270) 34
EQUAL (271) 38
NOTEQUAL (272) 39
AND (273) 36
OR (274) 37
GT (275) 40
GE (276) 41
LT (277) 42
LE (278) 43
LPARENTHESES (279) 13 14 50 51
RPARENTHESES (280) 13 14 50 51
LBRACE (281) 3 31
RBRACE (282) 3 31
LBRACKET (283) 33
RBRACKET (284) 33
DOT (285)
SEMICOLON (286) 8 9 10 12 16
COMMA (287) 54
ID (288) 8 9 10 32 33
CONST (289) 10
SIGN (290)
VEC_T (291) 22
FUNC_ID (292) 51
VOID_T (293)
INT_T (294) 19
INT_C (295) 25 33
FLOAT_T (296) 20
FLOAT_C (297) 26
BOOL_T (298) 21
BOOL_C (299) 27


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1 2, on right: 0
scope (53)
    on left: 3, on right: 1 15
declarations (54)
    on left: 4 5, on right: 3 4
statements (55)
    on left: 6 7, on right: 3 6
declaration (56)
    on left: 8 9 10 11, on right: 4
statement (57)
    on left: 12 13 14 15 16, on right: 6 13 14 17
else_statement (58)
    on left: 17 18, on right: 13
type (59)
    on left: 19 20 21 22, on right: 8 9 10 50
expression (60)
    on left: 23 24 25 26 27 28 29 30 31, on right: 9 10 12 13 14 29
    30 31 54 55
variable (61)
    on left: 32 33, on right: 12 28
unary_op (62)
    on left: 34 35, on right: 29
binary_op (63)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49, on right: 30
constructor (64)
    on left: 50, on right: 23
function (65)
    on left: 51, on right: 24
arguments_opt (66)
    on left: 52 53, on right: 51
arguments (67)
    on left: 54 55, on right: 50 52 54


State 0

    0 $accept: . program $end

    LBRACE  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program  go to state 2
    scope    go to state 3


State 1

    3 scope: LBRACE . declarations statements RBRACE

    $default  reduce using rule 5 (declarations)

    declarations  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: scope .

    $default  reduce using rule 1 (program)


State 4

    3 scope: LBRACE declarations . statements RBRACE
    4 declarations: declarations . declaration

    CONST    shift, and go to state 6
    VEC_T    shift, and go to state 7
    INT_T    shift, and go to state 8
    FLOAT_T  shift, and go to state 9
    BOOL_T   shift, and go to state 10

    IF         reduce using rule 7 (statements)
    IF         [reduce using rule 11 (declaration)]
    WHILE      reduce using rule 7 (statements)
    WHILE      [reduce using rule 11 (declaration)]
    LBRACE     reduce using rule 7 (statements)
    LBRACE     [reduce using rule 11 (declaration)]
    RBRACE     reduce using rule 7 (statements)
    RBRACE     [reduce using rule 11 (declaration)]
    SEMICOLON  reduce using rule 7 (statements)
    SEMICOLON  [reduce using rule 11 (declaration)]
    ID         reduce using rule 7 (statements)
    ID         [reduce using rule 11 (declaration)]
    CONST      [reduce using rule 11 (declaration)]
    VEC_T      [reduce using rule 11 (declaration)]
    INT_T      [reduce using rule 11 (declaration)]
    FLOAT_T    [reduce using rule 11 (declaration)]
    BOOL_T     [reduce using rule 11 (declaration)]
    $default   reduce using rule 7 (statements)

    statements   go to state 11
    declaration  go to state 12
    type         go to state 13


State 5

    0 $accept: program $end .

    $default  accept


State 6

   10 declaration: CONST . type ID ASSIGNMENT expression SEMICOLON

    VEC_T    shift, and go to state 7
    INT_T    shift, and go to state 8
    FLOAT_T  shift, and go to state 9
    BOOL_T   shift, and go to state 10

    type  go to state 14


State 7

   22 type: VEC_T .

    $default  reduce using rule 22 (type)


State 8

   19 type: INT_T .

    $default  reduce using rule 19 (type)


State 9

   20 type: FLOAT_T .

    $default  reduce using rule 20 (type)


State 10

   21 type: BOOL_T .

    $default  reduce using rule 21 (type)


State 11

    3 scope: LBRACE declarations statements . RBRACE
    6 statements: statements . statement

    IF         shift, and go to state 15
    WHILE      shift, and go to state 16
    LBRACE     shift, and go to state 1
    RBRACE     shift, and go to state 17
    SEMICOLON  shift, and go to state 18
    ID         shift, and go to state 19

    scope      go to state 20
    statement  go to state 21
    variable   go to state 22


State 12

    4 declarations: declarations declaration .

    $default  reduce using rule 4 (declarations)


State 13

    8 declaration: type . ID SEMICOLON
    9            | type . ID ASSIGNMENT expression SEMICOLON

    ID  shift, and go to state 23


State 14

   10 declaration: CONST type . ID ASSIGNMENT expression SEMICOLON

    ID  shift, and go to state 24


State 15

   13 statement: IF . LPARENTHESES expression RPARENTHESES statement else_statement

    LPARENTHESES  shift, and go to state 25


State 16

   14 statement: WHILE . LPARENTHESES expression RPARENTHESES statement

    LPARENTHESES  shift, and go to state 26


State 17

    3 scope: LBRACE declarations statements RBRACE .

    $default  reduce using rule 3 (scope)


State 18

   16 statement: SEMICOLON .

    $default  reduce using rule 16 (statement)


State 19

   32 variable: ID .
   33         | ID . LBRACKET INT_C RBRACKET

    LBRACKET  shift, and go to state 27

    $default  reduce using rule 32 (variable)


State 20

   15 statement: scope .

    $default  reduce using rule 15 (statement)


State 21

    6 statements: statements statement .

    $default  reduce using rule 6 (statements)


State 22

   12 statement: variable . ASSIGNMENT expression SEMICOLON

    ASSIGNMENT  shift, and go to state 28


State 23

    8 declaration: type ID . SEMICOLON
    9            | type ID . ASSIGNMENT expression SEMICOLON

    ASSIGNMENT  shift, and go to state 29
    SEMICOLON   shift, and go to state 30


State 24

   10 declaration: CONST type ID . ASSIGNMENT expression SEMICOLON

    ASSIGNMENT  shift, and go to state 31


State 25

   13 statement: IF LPARENTHESES . expression RPARENTHESES statement else_statement

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 40
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 26

   14 statement: WHILE LPARENTHESES . expression RPARENTHESES statement

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 45
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 27

   33 variable: ID LBRACKET . INT_C RBRACKET

    INT_C  shift, and go to state 46


State 28

   12 statement: variable ASSIGNMENT . expression SEMICOLON

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 47
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 29

    9 declaration: type ID ASSIGNMENT . expression SEMICOLON

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 48
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 30

    8 declaration: type ID SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 31

   10 declaration: CONST type ID ASSIGNMENT . expression SEMICOLON

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 49
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 32

   35 unary_op: SUBTRACT .

    $default  reduce using rule 35 (unary_op)


State 33

   34 unary_op: NOT .

    $default  reduce using rule 34 (unary_op)


State 34

   31 expression: LBRACE . expression RBRACE

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 50
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 35

   51 function: FUNC_ID . LPARENTHESES arguments_opt RPARENTHESES

    LPARENTHESES  shift, and go to state 51


State 36

   25 expression: INT_C .

    $default  reduce using rule 25 (expression)


State 37

   26 expression: FLOAT_C .

    $default  reduce using rule 26 (expression)


State 38

   27 expression: BOOL_C .

    $default  reduce using rule 27 (expression)


State 39

   50 constructor: type . LPARENTHESES arguments RPARENTHESES

    LPARENTHESES  shift, and go to state 52


State 40

   13 statement: IF LPARENTHESES expression . RPARENTHESES statement else_statement
   30 expression: expression . binary_op expression

    ASSIGNMENT    shift, and go to state 53
    ADD           shift, and go to state 54
    SUBTRACT      shift, and go to state 55
    MULTIPLY      shift, and go to state 56
    DIVIDE        shift, and go to state 57
    POWER         shift, and go to state 58
    EQUAL         shift, and go to state 59
    NOTEQUAL      shift, and go to state 60
    AND           shift, and go to state 61
    OR            shift, and go to state 62
    GT            shift, and go to state 63
    GE            shift, and go to state 64
    LT            shift, and go to state 65
    LE            shift, and go to state 66
    RPARENTHESES  shift, and go to state 67

    binary_op  go to state 68


State 41

   28 expression: variable .

    $default  reduce using rule 28 (expression)


State 42

   29 expression: unary_op . expression

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 69
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 43

   23 expression: constructor .

    $default  reduce using rule 23 (expression)


State 44

   24 expression: function .

    $default  reduce using rule 24 (expression)


State 45

   14 statement: WHILE LPARENTHESES expression . RPARENTHESES statement
   30 expression: expression . binary_op expression

    ASSIGNMENT    shift, and go to state 53
    ADD           shift, and go to state 54
    SUBTRACT      shift, and go to state 55
    MULTIPLY      shift, and go to state 56
    DIVIDE        shift, and go to state 57
    POWER         shift, and go to state 58
    EQUAL         shift, and go to state 59
    NOTEQUAL      shift, and go to state 60
    AND           shift, and go to state 61
    OR            shift, and go to state 62
    GT            shift, and go to state 63
    GE            shift, and go to state 64
    LT            shift, and go to state 65
    LE            shift, and go to state 66
    RPARENTHESES  shift, and go to state 70

    binary_op  go to state 68


State 46

   33 variable: ID LBRACKET INT_C . RBRACKET

    RBRACKET  shift, and go to state 71


State 47

   12 statement: variable ASSIGNMENT expression . SEMICOLON
   30 expression: expression . binary_op expression

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66
    SEMICOLON   shift, and go to state 72

    binary_op  go to state 68


State 48

    9 declaration: type ID ASSIGNMENT expression . SEMICOLON
   30 expression: expression . binary_op expression

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66
    SEMICOLON   shift, and go to state 73

    binary_op  go to state 68


State 49

   10 declaration: CONST type ID ASSIGNMENT expression . SEMICOLON
   30 expression: expression . binary_op expression

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66
    SEMICOLON   shift, and go to state 74

    binary_op  go to state 68


State 50

   30 expression: expression . binary_op expression
   31           | LBRACE expression . RBRACE

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66
    RBRACE      shift, and go to state 75

    binary_op  go to state 68


State 51

   51 function: FUNC_ID LPARENTHESES . arguments_opt RPARENTHESES

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    $default  reduce using rule 53 (arguments_opt)

    type           go to state 39
    expression     go to state 76
    variable       go to state 41
    unary_op       go to state 42
    constructor    go to state 43
    function       go to state 44
    arguments_opt  go to state 77
    arguments      go to state 78


State 52

   50 constructor: type LPARENTHESES . arguments RPARENTHESES

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 76
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44
    arguments    go to state 79


State 53

   48 binary_op: ASSIGNMENT .

    $default  reduce using rule 48 (binary_op)


State 54

   44 binary_op: ADD .

    $default  reduce using rule 44 (binary_op)


State 55

   45 binary_op: SUBTRACT .

    $default  reduce using rule 45 (binary_op)


State 56

   46 binary_op: MULTIPLY .

    $default  reduce using rule 46 (binary_op)


State 57

   47 binary_op: DIVIDE .

    $default  reduce using rule 47 (binary_op)


State 58

   49 binary_op: POWER .

    $default  reduce using rule 49 (binary_op)


State 59

   38 binary_op: EQUAL .

    $default  reduce using rule 38 (binary_op)


State 60

   39 binary_op: NOTEQUAL .

    $default  reduce using rule 39 (binary_op)


State 61

   36 binary_op: AND .

    $default  reduce using rule 36 (binary_op)


State 62

   37 binary_op: OR .

    $default  reduce using rule 37 (binary_op)


State 63

   40 binary_op: GT .

    $default  reduce using rule 40 (binary_op)


State 64

   41 binary_op: GE .

    $default  reduce using rule 41 (binary_op)


State 65

   42 binary_op: LT .

    $default  reduce using rule 42 (binary_op)


State 66

   43 binary_op: LE .

    $default  reduce using rule 43 (binary_op)


State 67

   13 statement: IF LPARENTHESES expression RPARENTHESES . statement else_statement

    IF         shift, and go to state 15
    WHILE      shift, and go to state 16
    LBRACE     shift, and go to state 1
    SEMICOLON  shift, and go to state 18
    ID         shift, and go to state 19

    scope      go to state 20
    statement  go to state 80
    variable   go to state 22


State 68

   30 expression: expression binary_op . expression

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 81
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 69

   29 expression: unary_op expression .
   30           | expression . binary_op expression

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66

    ASSIGNMENT  [reduce using rule 29 (expression)]
    ADD         [reduce using rule 29 (expression)]
    SUBTRACT    [reduce using rule 29 (expression)]
    MULTIPLY    [reduce using rule 29 (expression)]
    DIVIDE      [reduce using rule 29 (expression)]
    POWER       [reduce using rule 29 (expression)]
    EQUAL       [reduce using rule 29 (expression)]
    NOTEQUAL    [reduce using rule 29 (expression)]
    AND         [reduce using rule 29 (expression)]
    OR          [reduce using rule 29 (expression)]
    GT          [reduce using rule 29 (expression)]
    GE          [reduce using rule 29 (expression)]
    LT          [reduce using rule 29 (expression)]
    LE          [reduce using rule 29 (expression)]
    $default    reduce using rule 29 (expression)

    binary_op  go to state 68


State 70

   14 statement: WHILE LPARENTHESES expression RPARENTHESES . statement

    IF         shift, and go to state 15
    WHILE      shift, and go to state 16
    LBRACE     shift, and go to state 1
    SEMICOLON  shift, and go to state 18
    ID         shift, and go to state 19

    scope      go to state 20
    statement  go to state 82
    variable   go to state 22


State 71

   33 variable: ID LBRACKET INT_C RBRACKET .

    $default  reduce using rule 33 (variable)


State 72

   12 statement: variable ASSIGNMENT expression SEMICOLON .

    $default  reduce using rule 12 (statement)


State 73

    9 declaration: type ID ASSIGNMENT expression SEMICOLON .

    $default  reduce using rule 9 (declaration)


State 74

   10 declaration: CONST type ID ASSIGNMENT expression SEMICOLON .

    $default  reduce using rule 10 (declaration)


State 75

   31 expression: LBRACE expression RBRACE .

    $default  reduce using rule 31 (expression)


State 76

   30 expression: expression . binary_op expression
   55 arguments: expression .

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66

    $default  reduce using rule 55 (arguments)

    binary_op  go to state 68


State 77

   51 function: FUNC_ID LPARENTHESES arguments_opt . RPARENTHESES

    RPARENTHESES  shift, and go to state 83


State 78

   52 arguments_opt: arguments .
   54 arguments: arguments . COMMA expression

    COMMA  shift, and go to state 84

    $default  reduce using rule 52 (arguments_opt)


State 79

   50 constructor: type LPARENTHESES arguments . RPARENTHESES
   54 arguments: arguments . COMMA expression

    RPARENTHESES  shift, and go to state 85
    COMMA         shift, and go to state 84


State 80

   13 statement: IF LPARENTHESES expression RPARENTHESES statement . else_statement

    ELSE  shift, and go to state 86

    ELSE      [reduce using rule 18 (else_statement)]
    $default  reduce using rule 18 (else_statement)

    else_statement  go to state 87


State 81

   30 expression: expression . binary_op expression
   30           | expression binary_op expression .

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66

    ASSIGNMENT  [reduce using rule 30 (expression)]
    ADD         [reduce using rule 30 (expression)]
    SUBTRACT    [reduce using rule 30 (expression)]
    MULTIPLY    [reduce using rule 30 (expression)]
    DIVIDE      [reduce using rule 30 (expression)]
    POWER       [reduce using rule 30 (expression)]
    EQUAL       [reduce using rule 30 (expression)]
    NOTEQUAL    [reduce using rule 30 (expression)]
    AND         [reduce using rule 30 (expression)]
    OR          [reduce using rule 30 (expression)]
    GT          [reduce using rule 30 (expression)]
    GE          [reduce using rule 30 (expression)]
    LT          [reduce using rule 30 (expression)]
    LE          [reduce using rule 30 (expression)]
    $default    reduce using rule 30 (expression)

    binary_op  go to state 68


State 82

   14 statement: WHILE LPARENTHESES expression RPARENTHESES statement .

    $default  reduce using rule 14 (statement)


State 83

   51 function: FUNC_ID LPARENTHESES arguments_opt RPARENTHESES .

    $default  reduce using rule 51 (function)


State 84

   54 arguments: arguments COMMA . expression

    SUBTRACT  shift, and go to state 32
    NOT       shift, and go to state 33
    LBRACE    shift, and go to state 34
    ID        shift, and go to state 19
    VEC_T     shift, and go to state 7
    FUNC_ID   shift, and go to state 35
    INT_T     shift, and go to state 8
    INT_C     shift, and go to state 36
    FLOAT_T   shift, and go to state 9
    FLOAT_C   shift, and go to state 37
    BOOL_T    shift, and go to state 10
    BOOL_C    shift, and go to state 38

    type         go to state 39
    expression   go to state 88
    variable     go to state 41
    unary_op     go to state 42
    constructor  go to state 43
    function     go to state 44


State 85

   50 constructor: type LPARENTHESES arguments RPARENTHESES .

    $default  reduce using rule 50 (constructor)


State 86

   17 else_statement: ELSE . statement

    IF         shift, and go to state 15
    WHILE      shift, and go to state 16
    LBRACE     shift, and go to state 1
    SEMICOLON  shift, and go to state 18
    ID         shift, and go to state 19

    scope      go to state 20
    statement  go to state 89
    variable   go to state 22


State 87

   13 statement: IF LPARENTHESES expression RPARENTHESES statement else_statement .

    $default  reduce using rule 13 (statement)


State 88

   30 expression: expression . binary_op expression
   54 arguments: arguments COMMA expression .

    ASSIGNMENT  shift, and go to state 53
    ADD         shift, and go to state 54
    SUBTRACT    shift, and go to state 55
    MULTIPLY    shift, and go to state 56
    DIVIDE      shift, and go to state 57
    POWER       shift, and go to state 58
    EQUAL       shift, and go to state 59
    NOTEQUAL    shift, and go to state 60
    AND         shift, and go to state 61
    OR          shift, and go to state 62
    GT          shift, and go to state 63
    GE          shift, and go to state 64
    LT          shift, and go to state 65
    LE          shift, and go to state 66

    $default  reduce using rule 54 (arguments)

    binary_op  go to state 68


State 89

   17 else_statement: ELSE statement .

    $default  reduce using rule 17 (else_statement)
